diff -x '*svn*' -Nru ./app.c /home/gawriloff/2/asterisk-chan-dongle-asterisk11/app.c
--- ./app.c	2014-01-29 13:22:10.000000000 +0300
+++ /home/gawriloff/2/asterisk-chan-dongle-asterisk11/app.c	2013-08-28 23:55:14.000000000 +0300
@@ -18,7 +18,7 @@
 #include <asterisk/app.h>	/* AST_DECLARE_APP_ARGS() ... */
 #include <asterisk/pbx.h>	/* pbx_builtin_setvar_helper() */
 #include <asterisk/module.h>	/* ast_register_application2() ast_unregister_application() */
-#include <asterisk/version.h>	/* ASTERISK_VERSION_NUM */
+#include <asterisk/ast_version.h>	/* ASTERISK_VERSION_NUM */
 
 #include "app.h"		/* app_register() app_unregister() */
 #include "chan_dongle.h"	/* struct pvt */
diff -x '*svn*' -Nru ./at_response.c /home/gawriloff/2/asterisk-chan-dongle-asterisk11/at_response.c
--- ./at_response.c	2014-01-29 13:22:10.000000000 +0300
+++ /home/gawriloff/2/asterisk-chan-dongle-asterisk11/at_response.c	2013-08-28 23:55:14.000000000 +0300
@@ -851,14 +851,15 @@
 
 		return -1;
 	}
-	cpvt = channel->tech_pvt;
+
+	cpvt = ast_channel_tech_pvt(channel);
 // FIXME: not execute if channel_new() failed
 	CPVT_SET_FLAGS(cpvt, CALL_FLAG_NEED_HANGUP);
 
 	// ast_pbx_start() usually failed if asterisk.conf minmemfree set too low, try drop buffer cache sync && echo 3 > /proc/sys/vm/drop_caches
 	if (ast_pbx_start (channel))
 	{
-		channel->tech_pvt = NULL;
+		ast_channel_tech_pvt_set(channel, NULL);
 		cpvt_free(cpvt);
 
 		ast_hangup (channel);
@@ -920,7 +921,9 @@
 								if(cpvt->channel)
 								{
 									/* FIXME: unprotected channel access */
-									cpvt->channel->rings += pvt->rings;
+									int rings = ast_channel_rings(cpvt->channel);
+									rings += pvt->rings;
+									ast_channel_rings_set(cpvt->channel, rings);
 									pvt->rings = 0;
 								}
 							}
@@ -1587,7 +1590,6 @@
 		"E171",
 		"E153",
 		"E156B",
-		"E1752",
 	};
 
 	ast_copy_string (pvt->model, str, sizeof (pvt->model));
diff -x '*svn*' -Nru ./chan_dongle.c /home/gawriloff/2/asterisk-chan-dongle-asterisk11/chan_dongle.c
--- ./chan_dongle.c	2014-10-08 09:06:55.000000000 +0300
+++ /home/gawriloff/2/asterisk-chan-dongle-asterisk11/chan_dongle.c	2013-08-28 23:55:14.000000000 +0300
@@ -43,6 +43,7 @@
 #include <asterisk.h>
 ASTERISK_FILE_VERSION(__FILE__, "$Rev: " PACKAGE_REVISION " $")
 
+#include <asterisk/ast_version.h>
 #include <asterisk/stringfields.h>	/* AST_DECLARE_STRING_FIELDS for asterisk/manager.h */
 #include <asterisk/manager.h>
 #include <asterisk/dsp.h>
@@ -71,6 +72,8 @@
 
 EXPORT_DEF const char * const dev_state_strs[4] = { "stop", "restart", "remove", "start" };
 EXPORT_DEF public_state_t * gpublic;
+EXPORT_DEF struct ast_format chan_dongle_format;
+EXPORT_DEF struct ast_format_cap * chan_dongle_format_cap;
 
 
 static int public_state_init(struct public_state * state);
@@ -112,7 +115,7 @@
 		basename = devname;
 
 	/* NOTE: use system system wide lock directory */
-	return snprintf(buf, length, "/var/lock/LCK..%s", basename);
+	return snprintf(buf, length, "/var/lock/LOCK..%s", basename);
 }
 
 #/* return 0 on error */
@@ -1659,6 +1662,16 @@
 		rv = AST_MODULE_LOAD_FAILURE;
 		if(discovery_restart(state) == 0)
 		{
+#if ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+			/* set preferred capabilities */
+		        ast_format_set(&chan_dongle_format, AST_FORMAT_SLINEAR, 0);
+		        if (!(channel_tech.capabilities = ast_format_cap_alloc())) {
+                		return AST_MODULE_LOAD_FAILURE;
+		        }
+		        ast_format_cap_add(channel_tech.capabilities, &chan_dongle_format);
+			chan_dongle_format_cap = channel_tech.capabilities;
+#endif
+
 			/* register our channel type */
 			if(ast_channel_register(&channel_tech) == 0)
 			{
@@ -1671,6 +1684,9 @@
 			}
 			else
 			{
+#if ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+				channel_tech.capabilities = ast_format_cap_destroy(channel_tech.capabilities);
+#endif
 				ast_log (LOG_ERROR, "Unable to register channel class %s\n", channel_tech.type);
 			}
 			discovery_stop(state);
@@ -1698,6 +1714,9 @@
 {
 	/* First, take us out of the channel loop */
 	ast_channel_unregister (&channel_tech);
+#if ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+	channel_tech.capabilities = ast_format_cap_destroy(channel_tech.capabilities);
+#endif
 
 	/* Unregister the CLI & APP & MANAGER */
 
diff -x '*svn*' -Nru ./chan_dongle.h /home/gawriloff/2/asterisk-chan-dongle-asterisk11/chan_dongle.h
--- ./chan_dongle.h	2014-10-08 09:06:55.000000000 +0300
+++ /home/gawriloff/2/asterisk-chan-dongle-asterisk11/chan_dongle.h	2013-08-28 23:55:14.000000000 +0300
@@ -20,7 +20,7 @@
 #include "dc_config.h"				/* pvt_config_t */
 
 #define MODULE_DESCRIPTION	"Huawei 3G Dongle Channel Driver"
-#define MAXDONGLEDEVICES	128
+#define MAXDONGLEDEVICES	256
 
 INLINE_DECL const char * dev_state2str(dev_state_t state)
 {
@@ -33,6 +33,9 @@
 	return enum2str(state, states, ITEMS_OF(states));
 }
 
+/* Only linear is allowed */
+EXPORT_DECL struct ast_format chan_dongle_format;
+EXPORT_DECL struct ast_format_cap * chan_dongle_format_cap;
 
 typedef enum {
 	RESTATE_TIME_NOW	= 0,
diff -x '*svn*' -Nru ./channel.c /home/gawriloff/2/asterisk-chan-dongle-asterisk11/channel.c
--- ./channel.c	2014-01-29 13:22:10.000000000 +0300
+++ /home/gawriloff/2/asterisk-chan-dongle-asterisk11/channel.c	2013-08-28 23:55:14.000000000 +0300
@@ -20,7 +20,7 @@
 #include <asterisk/musiconhold.h>		/* ast_moh_start() ast_moh_stop() */
 #include <asterisk/lock.h>			/* AST_MUTEX_DEFINE_STATIC */
 #include <asterisk/timing.h>			/* ast_timer_fd() ast_timer_set_rate() ast_timer_ack() */
-#include <asterisk/version.h>			/* ASTERISK_VERSION_NUM */
+#include <asterisk/ast_version.h>		/* ASTERISK_VERSION_NUM */
 
 #include "channel.h"
 #include "chan_dongle.h"
@@ -90,25 +90,32 @@
 	/* FIXME: requestor may be just proxy/masquerade for real channel */
 	//	use ast_bridged_channel(chan) ?
 	//	use requestor->tech->get_base_channel() ?
-	if(requestor && requestor->tech == &channel_tech && requestor->tech_pvt && ((struct cpvt*)requestor->tech_pvt)->pvt == pvt)
-		return 1;
-	return 0;
+	return (requestor
+		&& ast_channel_tech(requestor) == &channel_tech
+		&& ast_channel_tech_pvt(requestor)
+		&& ((struct cpvt*) ast_channel_tech_pvt(requestor))->pvt == pvt)
+		? 1
+		: 0;
 }
 
-#if ASTERISK_VERSION_NUM >= 10800
+#if ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+
+static struct ast_channel * channel_request (attribute_unused const char * type, struct ast_format_cap * cap, const struct ast_channel *requestor, void * data, int * cause)
+
+#elif ASTERISK_VERSION_NUM >= 10800 /* 1.8+ */
 //   TODO: simplify by move common code to functions
 static struct ast_channel * channel_request (attribute_unused const char * type, format_t format, const struct ast_channel * requestor, void * data, int * cause)
 
-#else /* #if ASTERISK_VERSION_NUM >= 10800 */
+#else /* 1.8- */
 /* TODO: add check when request 'holdother' what requestor is not on same device for 1.6 */
 
 static struct ast_channel * channel_request (attribute_unused const char * type, int format, void * data, int * cause)
 
-#endif /* #if ASTERISK_VERSION_NUM >= 10800 */
+#endif
 {
-#if ASTERISK_VERSION_NUM >= 10800
+#if ASTERISK_VERSION_NUM >= 10800 && ASTERISK_VERSION_NUM < 100000 /* 1.8+ .. 10- */
 	format_t oldformat;
-#else
+#elif ASTERISK_VERSION_NUM < 10800 /* 1.8- */
 	int oldformat;
 	const struct ast_channel * requestor = NULL;
 #endif
@@ -126,11 +133,18 @@
 		return NULL;
 	}
 
+#if ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+	if (!ast_format_cap_iscompatible(cap, &chan_dongle_format))
+#else
 	oldformat = format;
 	format &= AST_FORMAT_SLINEAR;
 	if (!format)
+#endif
 	{
-#if ASTERISK_VERSION_NUM >= 10800
+#if ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+		char buf[255];
+		ast_log (LOG_WARNING, "Asked to get a channel of unsupported format '%s'\n", ast_getformatname_multiple (buf, 255, cap));
+#elif ASTERISK_VERSION_NUM >= 10800 /* 1.8+ */
 		ast_log (LOG_WARNING, "Asked to get a channel of unsupported format '%s'\n", ast_getformatname (oldformat));
 #else
 		ast_log (LOG_WARNING, "Asked to get a channel of unsupported format '%d'\n", oldformat);
@@ -173,7 +187,7 @@
 #/* */
 static int channel_call (struct ast_channel* channel, char* dest, attribute_unused int timeout)
 {
-	struct cpvt* cpvt = channel->tech_pvt;
+	struct cpvt* cpvt = ast_channel_tech_pvt(channel);
 	struct pvt* pvt;
 	char* dest_dev;
 	const char* dest_num;
@@ -182,7 +196,7 @@
 
 	if(!cpvt || cpvt->channel != channel || !cpvt->pvt)
 	{
-		ast_log (LOG_WARNING, "call on unreferenced %s\n", channel->name);
+		ast_log (LOG_WARNING, "call on unreferenced %s\n", ast_channel_name(channel));
 		return -1;
 	}
 	pvt = cpvt->pvt;
@@ -192,9 +206,9 @@
 	if(parse_dial_string(dest_dev, &dest_num, &opts))
 		return -1;
 
-	if ((channel->_state != AST_STATE_DOWN) && (channel->_state != AST_STATE_RESERVED))
+	if ((ast_channel_state(channel) != AST_STATE_DOWN) && (ast_channel_state(channel) != AST_STATE_RESERVED))
 	{
-		ast_log (LOG_WARNING, "channel_call called on %s, neither down nor reserved\n", channel->name);
+		ast_log (LOG_WARNING, "channel_call called on %s, neither down nor reserved\n", ast_channel_name(channel));
 		return -1;
 	}
 
@@ -209,17 +223,13 @@
 	}
 	CPVT_SET_FLAGS(cpvt, opts);
 
-	ast_debug (1, "[%s] Calling %s on %s\n", PVT_ID(pvt), dest, channel->name);
+	ast_debug (1, "[%s] Calling %s on %s\n", PVT_ID(pvt), dest, ast_channel_name(channel));
 
 	if (CONF_SHARED(pvt, usecallingpres))
 	{
 		if (CONF_SHARED(pvt, callingpres) < 0)
 		{
-#if ASTERISK_VERSION_NUM >= 10800
-			clir = channel->connected.id.number.presentation;
-#else
-			clir = channel->cid.cid_pres;
-#endif
+			clir = ast_channel_connected(channel)->id.number.presentation;
 		}
 		else
 		{
@@ -328,7 +338,7 @@
 #/* we has 2 case of call this function, when local side want terminate call and when called for cleanup after remote side alreay terminate call, CEND received and cpvt destroyed */
 static int channel_hangup (struct ast_channel* channel)
 {
-	struct cpvt* cpvt = channel->tech_pvt;
+	struct cpvt* cpvt = ast_channel_tech_pvt(channel);
 	struct pvt* pvt;
 
 	/* its possible call with channel w/o tech_pvt */
@@ -357,7 +367,7 @@
 	}
 
 	/* drop channel -> cpvt reference */
-	channel->tech_pvt = NULL;
+	ast_channel_tech_pvt_set(channel, NULL);
 
 	ast_module_unref (self_module());
 	ast_setstate (channel, AST_STATE_DOWN);
@@ -368,12 +378,12 @@
 #/* */
 static int channel_answer (struct ast_channel* channel)
 {
-	struct cpvt* cpvt = channel->tech_pvt;
+	struct cpvt* cpvt = ast_channel_tech_pvt(channel);
 	struct pvt* pvt;
 
 	if(!cpvt || cpvt->channel != channel || !cpvt->pvt)
 	{
-		ast_log (LOG_WARNING, "call on unreferenced %s\n", channel->name);
+		ast_log (LOG_WARNING, "call on unreferenced %s\n", ast_channel_name(channel));
 		return 0;
 	}
 	pvt = cpvt->pvt;
@@ -397,13 +407,13 @@
 #/* */
 static int channel_digit_begin (struct ast_channel* channel, char digit)
 {
-	struct cpvt* cpvt = channel->tech_pvt;
+	struct cpvt* cpvt = ast_channel_tech_pvt(channel);
 	struct pvt* pvt;
 	int rv;
 
 	if(!cpvt || cpvt->channel != channel || !cpvt->pvt)
 	{
-		ast_log (LOG_WARNING, "call on unreferenced %s\n", channel->name);
+		ast_log (LOG_WARNING, "call on unreferenced %s\n", ast_channel_name(channel));
 		return -1;
 	}
 	pvt = cpvt->pvt;
@@ -571,10 +581,12 @@
 
 }
 
-#if ASTERISK_VERSION_NUM >= 10800
+#if ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+#define subclass_integer	subclass.integer
+#elif ASTERISK_VERSION_NUM >= 10800 /* 1.8+ */
 #define subclass_codec		subclass.codec
 #define subclass_integer	subclass.integer
-#else
+#else /* 1.8- */
 #define subclass_codec		subclass
 #define subclass_integer	subclass
 #endif
@@ -582,7 +594,7 @@
 #/* */
 static struct ast_frame* channel_read (struct ast_channel* channel)
 {
-	struct cpvt*		cpvt = channel->tech_pvt;
+	struct cpvt*		cpvt = ast_channel_tech_pvt(channel);
 	struct pvt*		pvt;
 	struct ast_frame*	f = &ast_null_frame;
 	ssize_t			res;
@@ -606,7 +618,7 @@
 		goto e_return;
 	}
 
-	if (pvt->a_timer && channel->fdno == 1)
+	if (pvt->a_timer && ast_channel_fdno(channel) == 1)
 	{
 		ast_timer_ack (pvt->a_timer, 1);
 		timing_write (pvt);
@@ -618,7 +630,11 @@
 		memset (&cpvt->a_read_frame, 0, sizeof (cpvt->a_read_frame));
 
 		cpvt->a_read_frame.frametype = AST_FRAME_VOICE;
-		cpvt->a_read_frame.subclass_codec= AST_FORMAT_SLINEAR;
+#if ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+		ast_format_copy(&cpvt->a_read_frame.subclass.format, &chan_dongle_format);
+#else
+		cpvt->a_read_frame.subclass_codec = AST_FORMAT_SLINEAR;
+#endif
 		cpvt->a_read_frame.data.ptr = cpvt->a_read_buf + AST_FRIENDLY_OFFSET;
 		cpvt->a_read_frame.offset = AST_FRIENDLY_OFFSET;
 		cpvt->a_read_frame.src = AST_MODULE;
@@ -727,19 +743,23 @@
 #/* */
 static int channel_write (struct ast_channel* channel, struct ast_frame* f)
 {
-	struct cpvt* cpvt = channel->tech_pvt;
+	struct cpvt* cpvt = ast_channel_tech_pvt(channel);
 	struct pvt* pvt;
 	size_t count;
 	int gains[2];
 
+#if ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+	if (f->frametype != AST_FRAME_VOICE || f->subclass.format.id != AST_FORMAT_SLINEAR)
+#else /* 10- */
 	if (f->frametype != AST_FRAME_VOICE || f->subclass_codec != AST_FORMAT_SLINEAR)
+#endif
 	{
 		return 0;
 	}
 
 	if(!cpvt || cpvt->channel != channel || !cpvt->pvt)
 	{
-		ast_log (LOG_WARNING, "call on unreferenced %s\n", channel->name);
+		ast_log (LOG_WARNING, "call on unreferenced %s\n", ast_channel_name(channel));
 		return 0;
 	}
 
@@ -767,11 +787,11 @@
 
 		CPVT_SET_FLAGS(cpvt, CALL_FLAG_BRIDGE_CHECK);
 
-		if(bridged && bridged->tech == &channel_tech && bridged->tech_pvt && ((struct cpvt*)bridged->tech_pvt)->pvt == pvt)
+		if(bridged && ast_channel_tech(bridged) == &channel_tech && ast_channel_tech_pvt(bridged) && ((struct cpvt*) ast_channel_tech_pvt(bridged))->pvt == pvt)
 		{
 			CPVT_SET_FLAGS(cpvt, CALL_FLAG_BRIDGE_LOOP);
-			CPVT_SET_FLAGS((struct cpvt*)bridged->tech_pvt, CALL_FLAG_BRIDGE_LOOP);
-			ast_log (LOG_WARNING, "[%s] Bridged channels %s and %s working on same device, discard writes to avoid voice loop\n", PVT_ID(pvt), channel->name, bridged->name);
+			CPVT_SET_FLAGS((struct cpvt*) ast_channel_tech_pvt(bridged), CALL_FLAG_BRIDGE_LOOP);
+			ast_log (LOG_WARNING, "[%s] Bridged channels %s and %s working on same device, discard writes to avoid voice loop\n", PVT_ID(pvt), ast_channel_name(channel), ast_channel_name(bridged));
 			goto e_return;
 		}
 	}
@@ -894,12 +914,12 @@
 #/* */
 static int channel_fixup (struct ast_channel* oldchannel, struct ast_channel* newchannel)
 {
-	struct cpvt * cpvt = newchannel->tech_pvt;
+	struct cpvt * cpvt = ast_channel_tech_pvt(newchannel);
 	struct pvt* pvt;
 
 	if (!cpvt || !cpvt->pvt)
 	{
-		ast_log (LOG_WARNING, "call on unreferenced %s\n", newchannel->name);
+		ast_log (LOG_WARNING, "call on unreferenced %s\n", ast_channel_name(newchannel));
 		return -1;
 	}
 	pvt = cpvt->pvt;
@@ -950,7 +970,7 @@
 {
 	int res = 0;
 
-	ast_debug (1, "[%s] Requested indication %d\n", channel->name, condition);
+	ast_debug (1, "[%s] Requested indication %d\n", ast_channel_name(channel), condition);
 
 	switch (condition)
 	{
@@ -979,7 +999,7 @@
 			break;
 
 		default:
-			ast_log (LOG_WARNING, "[%s] Don't know how to indicate condition %d\n", channel->name, condition);
+			ast_log (LOG_WARNING, "[%s] Don't know how to indicate condition %d\n", ast_channel_name(channel), condition);
 			res = -1;
 			break;
 	}
@@ -1091,7 +1111,7 @@
 
 
 					/* drop channel -> cpvt reference */
-					channel->tech_pvt = NULL;
+					ast_channel_tech_pvt_set(channel, NULL);
 					cpvt_free(cpvt);
 					if (queue_hangup (channel, cause))
 					{
@@ -1118,7 +1138,8 @@
 		{ "DONGLENUMBER", pvt->subscriber_number },
 	};
 
-	ast_string_field_set (channel, language, CONF_SHARED(pvt, language));
+	//TODO uncomment and fix
+	//ast_string_field_set (channel, language, CONF_SHARED(pvt, language));
 
 	for(idx = 0; idx < ITEMS_OF(dev_vars); ++idx)
 		pbx_builtin_setvar_helper (channel, dev_vars[idx].name, dev_vars[idx].value);
@@ -1135,7 +1156,7 @@
 	if (cpvt)
 	{
 #if ASTERISK_VERSION_NUM >= 10800
-		channel = ast_channel_alloc (1, ast_state, cid_num, PVT_ID(pvt), NULL, dnid, CONF_SHARED(pvt, context), requestor ? requestor->linkedid : NULL, 0, "%s/%s-%02u%08lx", channel_tech.type, PVT_ID(pvt), call_idx, pvt->channel_instanse);
+		channel = ast_channel_alloc (1, ast_state, cid_num, PVT_ID(pvt), NULL, dnid, CONF_SHARED(pvt, context), requestor ? ast_channel_linkedid(requestor): NULL, 0, "%s/%s-%02u%08lx", channel_tech.type, PVT_ID(pvt), call_idx, pvt->channel_instanse);
 #else
 		channel = ast_channel_alloc (1, ast_state, cid_num, PVT_ID(pvt), NULL, dnid, CONF_SHARED(pvt, context), 0, "%s/%s-%02u%08lx", channel_tech.type, PVT_ID(pvt), call_idx, pvt->channel_instanse);
 #endif
@@ -1144,15 +1165,21 @@
 			cpvt->channel = channel;
 			pvt->channel_instanse++;
 
-			channel->tech_pvt	= cpvt;
-			channel->tech		= &channel_tech;
+			ast_channel_tech_pvt_set(channel, cpvt);
+			ast_channel_tech_set(channel, &channel_tech);
+#if ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+			ast_format_cap_add(ast_channel_nativeformats(channel), &chan_dongle_format);
+			ast_format_copy(ast_channel_writeformat(channel), &chan_dongle_format);
+			ast_format_copy(ast_channel_readformat(channel), &chan_dongle_format);
+#else /* 10- */
 			channel->nativeformats	= AST_FORMAT_SLINEAR;
 			channel->writeformat	= AST_FORMAT_SLINEAR;
 			channel->readformat	= AST_FORMAT_SLINEAR;
+#endif
 
 			if (ast_state == AST_STATE_RING)
 			{
-				channel->rings = 1;
+				ast_channel_rings_set(channel, 1);
 			}
 
 			set_channel_vars(pvt, channel);
@@ -1220,7 +1247,7 @@
 	if(channel)
 	{
 		if (hangupcause != 0)
-			channel->hangupcause = hangupcause;
+			ast_channel_hangupcause_set(channel, hangupcause);
 
 		rv = ast_queue_hangup (channel);
 	}
@@ -1236,9 +1263,11 @@
 
 	snprintf (channel_name, sizeof (channel_name), "%s@%s", exten, CONF_SHARED(pvt, context));
 
-#if ASTERISK_VERSION_NUM >= 10800
+#if ASTERISK_VERSION_NUM >= 100000 /* 10+ */
+	channel = ast_request ("Local", chan_dongle_format_cap, NULL, channel_name, &cause);
+#elif ASTERISK_VERSION_NUM >= 10800 /* 1.8+ */
 	channel = ast_request ("Local", AST_FORMAT_AUDIO_MASK, NULL, channel_name, &cause);
-#else
+#else /* 1.8- */
 	channel = ast_request ("Local", AST_FORMAT_AUDIO_MASK, channel_name, &cause);
 #endif
 	if (channel)
@@ -1265,13 +1294,13 @@
 #/* */
 static int channel_func_read(struct ast_channel* channel, attribute_unused const char* function, char* data, char* buf, size_t len)
 {
-	struct cpvt* cpvt = channel->tech_pvt;
+	struct cpvt* cpvt = ast_channel_tech_pvt(channel);
 	struct pvt* pvt;
 	int ret = 0;
 
 	if(!cpvt || !cpvt->pvt)
 	{
-		ast_log (LOG_WARNING, "call on unreferenced %s\n", channel->name);
+		ast_log (LOG_WARNING, "call on unreferenced %s\n", ast_channel_name(channel));
 		return -1;
 	}
 	pvt = cpvt->pvt;
@@ -1322,17 +1351,16 @@
 #/* */
 static int channel_func_write(struct ast_channel* channel, const char* function, char* data, const char* value)
 {
-	struct cpvt* cpvt = channel->tech_pvt;
-	struct pvt* pvt;
+	struct cpvt* cpvt = ast_channel_tech_pvt(channel);
+	struct pvt* pvt = cpvt->pvt;
 	call_state_t newstate, oldstate;
 	int ret = 0;
 
 	if(!cpvt || !cpvt->pvt)
 	{
-		ast_log (LOG_WARNING, "call on unreferenced %s\n", channel->name);
+		ast_log (LOG_WARNING, "call on unreferenced %s\n", ast_channel_name(channel));
 		return -1;
 	}
-	pvt = cpvt->pvt;
 
 	if (!strcasecmp(data, "callstate"))
 	{
@@ -1399,11 +1427,13 @@
 	return ret;
 }
 
-EXPORT_DEF const struct ast_channel_tech channel_tech =
+EXPORT_DEF struct ast_channel_tech channel_tech =
 {
 	.type			= "Dongle",
 	.description		= MODULE_DESCRIPTION,
+#if ASTERISK_VERSION_NUM < 100000 /* 10- */
 	.capabilities		= AST_FORMAT_SLINEAR,
+#endif
 	.requester		= channel_request,
 	.call			= channel_call,
 	.hangup			= channel_hangup,
diff -x '*svn*' -Nru ./channel.h /home/gawriloff/2/asterisk-chan-dongle-asterisk11/channel.h
--- ./channel.h	2014-01-29 13:22:10.000000000 +0300
+++ /home/gawriloff/2/asterisk-chan-dongle-asterisk11/channel.h	2013-08-28 23:55:14.000000000 +0300
@@ -19,7 +19,7 @@
 struct pvt;
 struct cpvt;
 
-EXPORT_DECL const struct ast_channel_tech channel_tech;
+EXPORT_DECL struct ast_channel_tech channel_tech;
 
 EXPORT_DECL struct ast_channel* new_channel (struct pvt * pvt, int ast_state, const char * cid_num, int call_idx, unsigned dir, unsigned state, const char * exten, const struct ast_channel * requestor);
 EXPORT_DECL int queue_control_channel (struct cpvt * cpvt, enum ast_control_frame_type control);
diff -x '*svn*' -Nru ./cli.c /home/gawriloff/2/asterisk-chan-dongle-asterisk11/cli.c
--- ./cli.c	2014-01-29 13:22:10.000000000 +0300
+++ /home/gawriloff/2/asterisk-chan-dongle-asterisk11/cli.c	2013-08-28 23:55:14.000000000 +0300
@@ -15,7 +15,7 @@
 #include <asterisk.h>
 #include <asterisk/cli.h>			/* struct ast_cli_entry; struct ast_cli_args */
 #include <asterisk/callerid.h>			/* ast_describe_caller_presentation() */
-#include <asterisk/version.h>			/* ASTERISK_VERSION_NUM */
+#include <asterisk/ast_version.h>		/* ASTERISK_VERSION_NUM */
 
 #include "cli.h"
 #include "chan_dongle.h"			/* devices */
diff -x '*svn*' -Nru ./.gitignore /home/gawriloff/2/asterisk-chan-dongle-asterisk11/.gitignore
--- ./.gitignore	1970-01-01 03:00:00.000000000 +0300
+++ /home/gawriloff/2/asterisk-chan-dongle-asterisk11/.gitignore	2013-08-28 23:55:14.000000000 +0300
@@ -0,0 +1,18 @@
+.INSTALL.swp
+.gitignore
+Makefile
+aclocal.m4
+autom4te.cache/
+config.guess
+config.h
+config.log
+config.status
+config.sub
+configure
+install-sh
+missing
+stamp-h1
+
+*.o
+*.o.d
+*.so
diff -x '*svn*' -Nru ./Makefile.in /home/gawriloff/2/asterisk-chan-dongle-asterisk11/Makefile.in
--- ./Makefile.in	2014-01-29 13:22:10.000000000 +0300
+++ /home/gawriloff/2/asterisk-chan-dongle-asterisk11/Makefile.in	2013-08-28 23:55:14.000000000 +0300
@@ -37,8 +37,8 @@
 INSTALL = @INSTALL@
 CHMOD = chmod
 
-# -DAST_MODULE=\"$(PROJM)\" -D_THREAD_SAFE
-CFLAGS  = @CFLAGS@ -I$(srcdir) @CPPFLAGS@ @DEFS@ @AC_CFLAGS@
+DEFS    = -DASTERISK_VERSION_NUM=110000
+CFLAGS  = @CFLAGS@ -I$(srcdir) @CPPFLAGS@ $(DEFS) @DEFS@ @AC_CFLAGS@
 LDFLAGS = @LDFLAGS@ 
 SOLINK  = @SOLINK@
 LIBS    = @LIBS@
diff -x '*svn*' -Nru ./manager.c /home/gawriloff/2/asterisk-chan-dongle-asterisk11/manager.c
--- ./manager.c	2014-01-29 13:22:10.000000000 +0300
+++ /home/gawriloff/2/asterisk-chan-dongle-asterisk11/manager.c	2013-08-28 23:55:14.000000000 +0300
@@ -731,9 +731,12 @@
 EXPORT_DEF void manager_register()
 {
 	unsigned i;
+	struct ast_module* module = self_module();
+
 	for(i = 0; i < ITEMS_OF(dcm); i++)
 	{
-		ast_manager_register2 (dcm[i].name, dcm[i].authority, dcm[i].func, dcm[i].brief, dcm[i].desc);
+		ast_manager_register2 (dcm[i].name, dcm[i].authority, dcm[i].func,
+			module, dcm[i].brief, dcm[i].desc);
 	}
 }
 
diff -x '*svn*' -Nru ./README.txt /home/gawriloff/2/asterisk-chan-dongle-asterisk11/README.txt
--- ./README.txt	2014-10-08 09:06:55.000000000 +0300
+++ /home/gawriloff/2/asterisk-chan-dongle-asterisk11/README.txt	2013-08-28 23:55:14.000000000 +0300
@@ -19,7 +19,7 @@
 * Huawei K3765
 
 Check complete list in:
-http://wiki.e1550.mobi/doku.php?id=requirements#list_of_supported_models
+http://code.google.com/p/asteris-chan-dongle/wiki/Supported_devices_eng
 
 Before using the channel driver make sure to:
 
